description: |
  This command is used to send additional 3rd party logs generated during your workflow job to Coralogix.
parameters:
  file:
    type: string
    description: Absolute or relative path to the file for sending.
  newline_pattern:
    type: string
    description: Regular expression to split records in the file.
    default: '\n|\r|\r\n'
  endpoint:
    type: string
    description: Coralogix API endpoint.
    default: api.coralogix.com
  private_key:
    type: env_var_name
    description: Private key provided by Coralogix (under Settings --> Send Your Logs).
    default: CORALOGIX_PRIVATE_KEY
  application:
    type: string
    description: Your application name.
    default: CircleCI
  subsystem:
    type: string
    description: Your subsystem name.
    default: workflow
  hostname:
    type: string
    description: Machine hostname.
    default: "$(hostname)"
  category:
    type: string
    description: The log's category.
    default: artifact
  class:
    type: string
    description: The log's class name.
    default: ''
  method:
    type: string
    description: The log's method name.
    default: ''
  thread:
    type: string
    description: Thread ID reported with the log.
    default: "${CIRCLE_WORKFLOW_ID}"
steps:
  - jq/install
  - run:
      name: Send to Coralogix
      when: always
      command: |
        if [ ! -f "<<parameters.file>>" ]; then
            echo "File not found!"
            exit 0
        fi
        LOG_FILE=$(realpath "<<parameters.file>>")
        LOG_BULKS=$(mktemp -d)
        pushd $LOG_BULKS
          split -C 2M -d "$LOG_FILE" ''
        popd
        for bulk in $LOG_BULKS/*; do
          jq -nMc \
            --rawfile lines "$bulk" \
            --arg private_key "${<<parameters.private_key>>}" \
            --arg application "<<parameters.application>>" \
            --arg subsystem "<<parameters.subsystem>>" \
            --arg hostname "<<parameters.hostname>>" \
            --arg category "<<parameters.category>>" \
            --arg class "<<parameters.class>>" \
            --arg method "<<parameters.method>>" \
            --arg thread "<<parameters.thread>>" '{
            "privateKey": $private_key,
            "applicationName": $application,
            "subsystemName": $subsystem,
            "computerName": $hostname,
            "logEntries": [
              $lines | split("<<parameters.newline_pattern>>"; "") | to_entries | .[] | {
                "timestamp": (now * 1000 + .key),
                "severity": 3,
                "text": .value | select(.!=""),
                "category": $category,
                "className": $class,
                "methodName": $method,
                "threadId": $thread
              }
            ]
          }' | curl -X POST -H 'Content-Type: application/json' -d @- -s 'https://<<parameters.endpoint>>/api/v1/logs'
        done
        rm -rf "$LOG_BULKS"
